......(省略)......
  95:  static void
  96:  ttywrite(unsigned char wb)
  97:  {
  98:  	(void) write(STDOUT_FILENO, &wb, 1);                        (15)
  99:  }
 100:  
 101:  static int
 102:  console_handler(struct vmctx *ctx, int vcpu, int in, int port, int bytes,
 103:  		uint32_t *eax, void *arg)
 104:  {
 105:  	static int opened;
 106:  
 107:  	if (bytes == 2 && in) {
 108:  		*eax = BVM_CONS_SIG;
 109:  		return (0);
 110:  	}
 111:  
 112:  	if (bytes != 4)
 113:  		return (-1);
 114:  
 115:  	if (!opened) {
 116:  		ttyopen();
 117:  		opened = 1;
 118:  	}
 119:  	
 120:  	if (in)                                                     (13)
 121:  		*eax = ttyread();
 122:  	else
 123:  		ttywrite(*eax);                                         (14)
 124:  
 125:  	return (0);
 126:  }
 127:  
 128:  static struct inout_port consport = {
 129:  	"bvmcons",
 130:  	BVM_CONSOLE_PORT,
 131:  	IOPORT_F_INOUT,
 132:  	console_handler                                             (12)
 133:  };
 134:  
 135:  void
 136:  init_bvmcons(void)
 137:  {
 138:  
 139:  	register_inout(&consport);                                  (11)
 140:  }


(15) ttywrite()はwrite()で標準出力に文字を書き込む。
(13) console_handler()ではIO方向がinならttyread()、outならttywrite()を実行し、標準入出力に対してIOを行う。
(14) 今回はoutが実行された場合を見ていく。eaxで指定された書き込み値をttywrite()に渡している。
(12) 登録するハンドラ関数としてconsole_handler()が指定されている。
(11) consportデバイスは起動時にここでハンドラを登録している。
