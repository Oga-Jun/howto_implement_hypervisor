......(省略)......
 100:  /*
 101:   * int vmx_setjmp(ctxp)
 102:   * %rdi = ctxp
 103:   *
 104:   * Return value is '0' when it returns directly from here.
 105:   * Return value is '1' when it returns after a vm exit through vmx_longjmp.
 106:   */
 107:  ENTRY(vmx_setjmp)
 108:  	movq	(%rsp),%rax			/* return address */            (1)
 109:  	movq    %r15,VMXCTX_HOST_R15(%rdi)                          (2)
 110:  	movq    %r14,VMXCTX_HOST_R14(%rdi)
 111:  	movq    %r13,VMXCTX_HOST_R13(%rdi)
 112:  	movq    %r12,VMXCTX_HOST_R12(%rdi)
 113:  	movq    %rbp,VMXCTX_HOST_RBP(%rdi)
 114:  	movq    %rsp,VMXCTX_HOST_RSP(%rdi)
 115:  	movq    %rbx,VMXCTX_HOST_RBX(%rdi)
 116:  	movq    %rax,VMXCTX_HOST_RIP(%rdi)                          (3)
 117:  
 118:  	/*
 119:  	 * XXX save host debug registers
 120:  	 */
 121:  	movl	$VMX_RETURN_DIRECT,%eax
 122:  	ret
 123:  END(vmx_setjmp)
 124:  
 125:  /*
 126:   * void vmx_return(struct vmxctx *ctxp, int retval)
 127:   * %rdi = ctxp
 128:   * %rsi = retval
 129:   * Return to vmm context through vmx_setjmp() with a value of 'retval'.
 130:   */
 131:  ENTRY(vmx_return)
 132:  	/* Restore host context. */
 133:  	movq	VMXCTX_HOST_R15(%rdi),%r15                          (8)
 134:  	movq	VMXCTX_HOST_R14(%rdi),%r14
 135:  	movq	VMXCTX_HOST_R13(%rdi),%r13
 136:  	movq	VMXCTX_HOST_R12(%rdi),%r12
 137:  	movq	VMXCTX_HOST_RBP(%rdi),%rbp
 138:  	movq	VMXCTX_HOST_RSP(%rdi),%rsp
 139:  	movq	VMXCTX_HOST_RBX(%rdi),%rbx
 140:  	movq	VMXCTX_HOST_RIP(%rdi),%rax                          (10)
 141:  	movq	%rax,(%rsp)			/* return address */            (11)
 142:  
 143:  	/*
 144:  	 * XXX restore host debug registers
 145:  	 */
 146:  	movl	%esi,%eax
 147:  	ret                                                         (12)
 148:  END(vmx_return)
 149:  
 150:  /*
 151:   * void vmx_longjmp(void)
 152:   * %rsp points to the struct vmxctx
 153:   */
 154:  ENTRY(vmx_longjmp)                                           (4)
 155:  	/*
 156:  	 * Save guest state that is not automatically saved in the vmcs.
 157:  	 */
 158:  	movq	%rdi,VMXCTX_GUEST_RDI(%rsp)                         (5)
 159:  	movq	%rsi,VMXCTX_GUEST_RSI(%rsp)
 160:  	movq	%rdx,VMXCTX_GUEST_RDX(%rsp)
 161:  	movq	%rcx,VMXCTX_GUEST_RCX(%rsp)
 162:  	movq	%r8,VMXCTX_GUEST_R8(%rsp)
 163:  	movq	%r9,VMXCTX_GUEST_R9(%rsp)
 164:  	movq	%rax,VMXCTX_GUEST_RAX(%rsp)
 165:  	movq	%rbx,VMXCTX_GUEST_RBX(%rsp)
 166:  	movq	%rbp,VMXCTX_GUEST_RBP(%rsp)
 167:  	movq	%r10,VMXCTX_GUEST_R10(%rsp)
 168:  	movq	%r11,VMXCTX_GUEST_R11(%rsp)
 169:  	movq	%r12,VMXCTX_GUEST_R12(%rsp)
 170:  	movq	%r13,VMXCTX_GUEST_R13(%rsp)
 171:  	movq	%r14,VMXCTX_GUEST_R14(%rsp)
 172:  	movq	%r15,VMXCTX_GUEST_R15(%rsp)
 173:  
 174:  	movq	%cr2,%rdi
 175:  	movq	%rdi,VMXCTX_GUEST_CR2(%rsp)
 176:  
 177:  	movq	%rsp,%rdi
 178:  	movq	$VMX_RETURN_LONGJMP,%rsi                            (6)
 179:  
 180:  	addq	$VMXCTX_TMPSTKTOP,%rsp
 181:  	callq	vmx_return                                          (7)
 182:  END(vmx_longjmp)


(1) スタック上のリターンアドレスを%raxに取り出す。
(2) 以下の行では、VMEntry時にVMCSへ自動保存されない
    ホストOSのレジスタをvmxctx構造体へ保存している。
(3) %raxに取り出したリターンアドレスをvmxctx構造体のhost_ripメンバに保存。
    ここまでがVMExit前に行われている処理。
(8) 以下の行では、VMExit時にVMCSから自動復帰されなかったホストOSのレジスタを復帰している。
(10) vmxctx構造体のhost_ripメンバから%raxへリターンアドレスをコピー。
(11) リターンアドレスをスタックにセット。
(12) 11でセットしたアドレスへリターン。
(4) VMExit時にはここから実行が再開される。
    以降の行で参照されている%rspはVMEntry時に自動保存され、VMExit時に自動復帰されている。
(5) 以下の行では、VMExit時にVMCSへ自動保存されなかったゲストOSのレジスタを保存している。
(6) 返り値としてVMX_RETURN_LONGJMPを指定。
(7) vmx_returnを呼び出してホストOSのレジスタを復帰する。
